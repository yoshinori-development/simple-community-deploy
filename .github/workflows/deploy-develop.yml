on:
  push:
    branches:
    - main

name: Deploy ECS Services develop environment.

env:
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::858884198044:role/github_deployment_develop
  SLACK_WEBHOOK: ${{ secrets.SIMPLE_COMMUNITY_DEV_SLACK_WEBHOOK }}
  ECS_CLUSTER_NAME: simple-community-develop

jobs:
  deploy:
    name: Deploy to ECS (develop)
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        service-name: [api-main, app-community]

    steps:
    - name: Set env
      run: |
        echo "TASK_DEFINITION_FILE=${{ env.ECS_CLUSTER_NAME }}/${{ matrix.service-name }}/task-definition.json" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # 変更が含まれるタスク定義ファイルを検出し、変更が含まれる場合のみ該当サービスのデプロイを行う
    - name: Chack deploy target service-name from git diff
      id: check-should-deploy
      run: |
        echo "Check diff between ${{ github.event.before }} and ${{ github.sha }}"
        DIFF=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        for line in `echo $DIFF`
        do
          echo $line
          echo $TASK_DEFINITION_FILE
          if [[ ${line} =~ ^$TASK_DEFINITION_FILE$ ]]; then
            echo '::set-output name=should-deploy::true'
            echo "${{ env.SERVICE_NAME }} diff detected."
            break
          else
            echo '::set-output name=should-deploy::false'
            echo "${{ env.SERVICE_NAME }} no diff. skip."
          fi
        done

    - name: Configure AWS Credentials
      uses: yoshinori-development/simple-community-actions-aws-creds@v1
      with: 
        aws_role_arn: ${{ env.AWS_ROLE_ARN }}
        aws_region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      if: ${{ steps.check-should-deploy.outputs.should-deploy == 'true' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Deploy Amazon ECS task definition
      if: ${{ steps.check-should-deploy.outputs.should-deploy == 'true' }}
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        service: ${{ env.SERVICE_NAME }}
        task-definition: ${{ env.TASK_DEFINITION_FILE }}

  slackNotification:
    if: always()
    needs: [deploy]
    name: workflow notification to slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ env.SLACK_WEBHOOK }}
